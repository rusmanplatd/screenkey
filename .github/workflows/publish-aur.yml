name: Publish to AUR (Arch Linux)

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish-aur:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release information
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=$(cat screenkey-app/package.json | grep version | head -1 | cut -d'"' -f4)
            TAG="v${VERSION}"
          else
            TAG=${{ github.event.release.tag_name }}
            VERSION=${TAG#v}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Create PKGBUILD
        env:
          VERSION: ${{ steps.release_info.outputs.version }}
          TAG: ${{ steps.release_info.outputs.tag }}
        run: |
          cat > PKGBUILD <<'EOF'
          # Maintainer: Rusman Wahab <rusman@example.com>
          pkgname=screenkey-app
          pkgver=$VERSION
          pkgrel=1
          pkgdesc="Display keyboard inputs on screen for tutorials and screencasts"
          arch=('x86_64')
          url="https://github.com/rusmanplatd/screenkey"
          license=('MIT')
          depends=('webkit2gtk' 'gtk3' 'libayatana-appindicator')
          makedepends=('rust' 'cargo' 'nodejs' 'npm')
          source=("${pkgname}-${pkgver}.tar.gz::https://github.com/rusmanplatd/screenkey/archive/${TAG}.tar.gz")
          sha256sums=('SKIP')  # Update with actual checksum

          build() {
              cd "screenkey-${TAG#v}/screenkey-app"

              # Build frontend
              npm install
              npm run build

              # Build Tauri application
              npm run tauri build
          }

          package() {
              cd "screenkey-${TAG#v}/screenkey-app"

              # Install binary
              install -Dm755 "src-tauri/target/release/screenkey-app" \
                  "${pkgdir}/usr/bin/screenkey-app"

              # Install desktop file
              install -Dm644 "${srcdir}/screenkey.desktop" \
                  "${pkgdir}/usr/share/applications/screenkey.desktop"

              # Install icon
              install -Dm644 "src-tauri/icons/128x128.png" \
                  "${pkgdir}/usr/share/icons/hicolor/128x128/apps/screenkey.png"

              # Install license
              install -Dm644 "../LICENSE" \
                  "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
          }
          EOF

          # Replace variables
          sed -i "s/\$VERSION/${VERSION}/g" PKGBUILD
          sed -i "s/\${TAG}/${TAG}/g" PKGBUILD

      - name: Create .SRCINFO
        run: |
          cat > .SRCINFO <<'EOF'
          pkgbase = screenkey-app
              pkgdesc = Display keyboard inputs on screen for tutorials and screencasts
              pkgver = $VERSION
              pkgrel = 1
              url = https://github.com/rusmanplatd/screenkey
              arch = x86_64
              license = MIT
              makedepends = rust
              makedepends = cargo
              makedepends = nodejs
              makedepends = npm
              depends = webkit2gtk
              depends = gtk3
              depends = libayatana-appindicator
              source = screenkey-app-$VERSION.tar.gz::https://github.com/rusmanplatd/screenkey/archive/$TAG.tar.gz
              sha256sums = SKIP

          pkgname = screenkey-app
          EOF

          # Replace variables
          sed -i "s/\$VERSION/${{ steps.release_info.outputs.version }}/g" .SRCINFO
          sed -i "s/\$TAG/${{ steps.release_info.outputs.tag }}/g" .SRCINFO

      - name: Create desktop file
        run: |
          cat > screenkey.desktop <<'EOF'
          [Desktop Entry]
          Type=Application
          Name=ScreenKey
          GenericName=Keyboard Display
          Comment=Display keyboard inputs on screen for tutorials and screencasts
          Exec=screenkey-app
          Icon=screenkey
          Terminal=false
          Categories=Utility;System;
          Keywords=keyboard;screencast;tutorial;recording;
          EOF

      - name: Setup SSH for AUR
        if: github.event_name == 'release'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          ssh-keyscan -t rsa aur.archlinux.org >> ~/.ssh/known_hosts

          cat > ~/.ssh/config <<EOF
          Host aur.archlinux.org
            IdentityFile ~/.ssh/aur
            User aur
          EOF

      - name: Clone AUR repository
        if: github.event_name == 'release'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Clone or create AUR repo
          git clone ssh://aur@aur.archlinux.org/screenkey-app.git aur-repo || {
            mkdir aur-repo
            cd aur-repo
            git init
            git remote add origin ssh://aur@aur.archlinux.org/screenkey-app.git
          }

      - name: Update AUR repository
        if: github.event_name == 'release'
        run: |
          cp PKGBUILD .SRCINFO screenkey.desktop aur-repo/
          cd aur-repo

          git add PKGBUILD .SRCINFO screenkey.desktop
          git commit -m "Update to version ${{ steps.release_info.outputs.version }}"
          git push origin master

      - name: Upload AUR files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: aur-package-files
          path: |
            PKGBUILD
            .SRCINFO
            screenkey.desktop

      - name: Create installation instructions
        run: |
          cat > INSTALL-AUR.md <<'EOF'
          # Install ScreenKey on Arch Linux

          ## Method 1: Using an AUR helper (yay, paru, etc.)

          ```bash
          # Using yay
          yay -S screenkey-app

          # Using paru
          paru -S screenkey-app
          ```

          ## Method 2: Manual installation

          ```bash
          # Clone the AUR repository
          git clone https://aur.archlinux.org/screenkey-app.git
          cd screenkey-app

          # Review PKGBUILD (important!)
          less PKGBUILD

          # Build and install
          makepkg -si
          ```

          ## Run

          ```bash
          sudo screenkey-app
          ```

          Note: Requires sudo for keyboard capture via `/dev/input` access.

          ## Update

          ```bash
          # With AUR helper
          yay -Syu screenkey-app

          # Manual
          cd screenkey-app
          git pull
          makepkg -si
          ```

          ## Uninstall

          ```bash
          sudo pacman -R screenkey-app
          ```

          ## Alternative: Add user to input group

          Instead of running with sudo every time:

          ```bash
          sudo usermod -a -G input $USER
          # Log out and log back in
          screenkey-app  # Now works without sudo
          ```
          EOF

          cat INSTALL-AUR.md >> $GITHUB_STEP_SUMMARY

      - name: Upload installation instructions
        uses: actions/upload-artifact@v4
        with:
          name: aur-installation-instructions
          path: INSTALL-AUR.md
